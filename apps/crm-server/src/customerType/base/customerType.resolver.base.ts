/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerType } from "./CustomerType";
import { CustomerTypeCountArgs } from "./CustomerTypeCountArgs";
import { CustomerTypeFindManyArgs } from "./CustomerTypeFindManyArgs";
import { CustomerTypeFindUniqueArgs } from "./CustomerTypeFindUniqueArgs";
import { CreateCustomerTypeArgs } from "./CreateCustomerTypeArgs";
import { UpdateCustomerTypeArgs } from "./UpdateCustomerTypeArgs";
import { DeleteCustomerTypeArgs } from "./DeleteCustomerTypeArgs";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { CustomerTypeService } from "../customerType.service";
@graphql.Resolver(() => CustomerType)
export class CustomerTypeResolverBase {
  constructor(protected readonly service: CustomerTypeService) {}

  async _customerTypesMeta(
    @graphql.Args() args: CustomerTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerType])
  async customerTypes(
    @graphql.Args() args: CustomerTypeFindManyArgs
  ): Promise<CustomerType[]> {
    return this.service.customerTypes(args);
  }

  @graphql.Query(() => CustomerType, { nullable: true })
  async customerType(
    @graphql.Args() args: CustomerTypeFindUniqueArgs
  ): Promise<CustomerType | null> {
    const result = await this.service.customerType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerType)
  async createCustomerType(
    @graphql.Args() args: CreateCustomerTypeArgs
  ): Promise<CustomerType> {
    return await this.service.createCustomerType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomerType)
  async updateCustomerType(
    @graphql.Args() args: UpdateCustomerTypeArgs
  ): Promise<CustomerType | null> {
    try {
      return await this.service.updateCustomerType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerType)
  async deleteCustomerType(
    @graphql.Args() args: DeleteCustomerTypeArgs
  ): Promise<CustomerType | null> {
    try {
      return await this.service.deleteCustomerType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Customer], { name: "customers" })
  async findCustomers(
    @graphql.Parent() parent: CustomerType,
    @graphql.Args() args: CustomerFindManyArgs
  ): Promise<Customer[]> {
    const results = await this.service.findCustomers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
