/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerTypeService } from "../customerType.service";
import { CustomerTypeCreateInput } from "./CustomerTypeCreateInput";
import { CustomerType } from "./CustomerType";
import { CustomerTypeFindManyArgs } from "./CustomerTypeFindManyArgs";
import { CustomerTypeWhereUniqueInput } from "./CustomerTypeWhereUniqueInput";
import { CustomerTypeUpdateInput } from "./CustomerTypeUpdateInput";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";

export class CustomerTypeControllerBase {
  constructor(protected readonly service: CustomerTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerType })
  async createCustomerType(
    @common.Body() data: CustomerTypeCreateInput
  ): Promise<CustomerType> {
    return await this.service.createCustomerType({
      data: data,
      select: {
        createdAt: true,
        id: true,
        typeName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerType] })
  @ApiNestedQuery(CustomerTypeFindManyArgs)
  async customerTypes(@common.Req() request: Request): Promise<CustomerType[]> {
    const args = plainToClass(CustomerTypeFindManyArgs, request.query);
    return this.service.customerTypes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        typeName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerType(
    @common.Param() params: CustomerTypeWhereUniqueInput
  ): Promise<CustomerType | null> {
    const result = await this.service.customerType({
      where: params,
      select: {
        createdAt: true,
        id: true,
        typeName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomerType(
    @common.Param() params: CustomerTypeWhereUniqueInput,
    @common.Body() data: CustomerTypeUpdateInput
  ): Promise<CustomerType | null> {
    try {
      return await this.service.updateCustomerType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          typeName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerType(
    @common.Param() params: CustomerTypeWhereUniqueInput
  ): Promise<CustomerType | null> {
    try {
      return await this.service.deleteCustomerType({
        where: params,
        select: {
          createdAt: true,
          id: true,
          typeName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/customers")
  @ApiNestedQuery(CustomerFindManyArgs)
  async findCustomers(
    @common.Req() request: Request,
    @common.Param() params: CustomerTypeWhereUniqueInput
  ): Promise<Customer[]> {
    const query = plainToClass(CustomerFindManyArgs, request.query);
    const results = await this.service.findCustomers(params.id, {
      ...query,
      select: {
        createdAt: true,

        customerType: {
          select: {
            id: true,
          },
        },

        dateOfBirth: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customers")
  async connectCustomers(
    @common.Param() params: CustomerTypeWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        connect: body,
      },
    };
    await this.service.updateCustomerType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customers")
  async updateCustomers(
    @common.Param() params: CustomerTypeWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        set: body,
      },
    };
    await this.service.updateCustomerType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customers")
  async disconnectCustomers(
    @common.Param() params: CustomerTypeWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        disconnect: body,
      },
    };
    await this.service.updateCustomerType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
